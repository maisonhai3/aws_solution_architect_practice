name: CI/CD for AWS Load Balancing Experiment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r exp_load_balancing/app/requirements.txt

      - name: Lint Python code
        run: |
          pip install flake8
          flake8 exp_load_balancing/app/handler.py

      - name: Run basic Flask app test
        run: |
          python -m unittest discover -s exp_load_balancing/app || true
        # (Optional) Add real tests if available

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file exp_load_balancing/cloudformation-load-balancing.yaml \
            --stack-name exp-load-balancing \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Verify CloudFormation stack status
        run: |
          aws cloudformation describe-stacks --stack-name exp-load-balancing

      - name: Get ALB DNS output
        id: alb_dns
        run: |
          alb_dns=$(aws cloudformation describe-stacks --stack-name exp-load-balancing \
            --query "Stacks[0].Outputs[?OutputKey=='ALBEndpoint'].OutputValue" --output text)
          echo "ALB_DNS=$alb_dns" >> $GITHUB_ENV

      - name: Test ALB endpoint health
        run: |
          if [ -z "$ALB_DNS" ]; then
            echo "ALB DNS not found!"; exit 1;
          fi
          for i in {1..10}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS/health || true)
            echo "Attempt $i: /health status: $status"
            if [ "$status" = "200" ]; then
              echo "ALB /health endpoint is healthy!"; exit 0;
            fi
            sleep 10
          done
          echo "ALB /health endpoint did not return 200 after several attempts."; exit 1
